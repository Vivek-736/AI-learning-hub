/* eslint-disable @typescript-eslint/no-unused-vars */
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
if (!apiKey) {
  throw new Error("API key is not defined");
}
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const courseOutline = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for python for exam and level of difficulty easy with summary of course. List of chapters along with summary for each chapter, topic list in each chapter, all results in JSON format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "Introduction to Python Programming (Easy Level)",\n  "course_summary": "This course provides a fundamental understanding of Python programming. It covers essential concepts such as variables, data types, control flow, functions, and basic input/output operations. The focus is on building a strong foundation for future Python learning without delving into advanced topics. No prior programming experience is required. You will learn to write simple Python scripts to solve basic problems.",\n  "chapters": [\n    {\n      "chapter_number": 1,\n      "chapter_title": "Introduction to Python",\n      "chapter_summary": "This chapter introduces Python and its features, including why it\'s a popular language for beginners. It covers the basic installation process on different operating systems and introduces a simple Integrated Development Environment (IDE) or text editor for writing and running Python code.",\n      "topics": [\n        "What is Python?",\n        "Why Python is a good language for beginners",\n        "Features of Python",\n        "Installation of Python on Windows, macOS, and Linux",\n        "Setting up a text editor or IDE (e.g., VS Code, Thonny)",\n        "Running your first Python program (Hello, World!)"\n      ]\n    },\n    {\n      "chapter_number": 2,\n      "chapter_title": "Variables, Data Types, and Operators",\n      "chapter_summary": "This chapter covers the basics of storing data using variables. It introduces fundamental data types like integers, floats, strings, and booleans, along with various operators to perform operations on these data types.",\n      "topics": [\n        "Variables: Naming rules and assignment",\n        "Data Types: Integers (int), Floating-point numbers (float), Strings (str), Booleans (bool)",\n        "Type conversion (casting)",\n        "Arithmetic Operators: +, -, *, /, %, **",\n        "Comparison Operators: ==, !=, >, <, >=, <=",\n        "Logical Operators: and, or, not",\n        "Assignment Operators: =, +=, -=, *=, /="\n      ]\n    },\n    {\n      "chapter_number": 3,\n      "chapter_title": "Control Flow: Conditional Statements",\n      "chapter_summary": "This chapter introduces conditional statements (`if`, `elif`, `else`) to control the flow of execution based on certain conditions. It enables programs to make decisions based on input or calculations.",\n      "topics": [\n        "The `if` statement",\n        "The `if-else` statement",\n        "The `if-elif-else` statement",\n        "Nested `if` statements (briefly)",\n        "Using comparison and logical operators in conditional statements",\n        "Truthiness and Falsiness"\n      ]\n    },\n    {\n      "chapter_number": 4,\n      "chapter_title": "Control Flow: Loops",\n      "chapter_summary": "This chapter introduces the concept of loops (`for` and `while`) to repeat blocks of code. You will learn how to iterate over sequences (like strings) and how to repeat actions until a specific condition is met.",\n      "topics": [\n        "The `for` loop: iterating over strings and ranges",\n        "The `while` loop",\n        "The `break` statement",\n        "The `continue` statement",\n        "Nested loops (briefly)",\n        "Using loops with conditional statements"\n      ]\n    },\n    {\n      "chapter_number": 5,\n      "chapter_title": "Functions",\n      "chapter_summary": "This chapter explains how to define and use functions to organize code into reusable blocks. You will learn about function arguments, return values, and the importance of modularity.",\n      "topics": [\n        "Defining a function: `def` keyword",\n        "Calling a function",\n        "Function arguments (parameters): positional and keyword arguments",\n        "Return values: the `return` statement",\n        "Scope of variables (local vs. global)",\n        "Default argument values"\n      ]\n    },\n    {\n      "chapter_number": 6,\n      "chapter_title": "Input and Output",\n      "chapter_summary": "This chapter teaches you how to get input from the user using the `input()` function and how to display output using the `print()` function. You will also learn how to format strings for better readability.",\n      "topics": [\n        "The `print()` function: displaying output",\n        "The `input()` function: getting input from the user",\n        "String formatting: using f-strings and .format() method",\n        "Type conversion: converting strings to numbers (int(), float())",\n        "Basic file I/O (reading from and writing to text files)"\n      ]\n    }\n  ],\n    "exam_tips": [\n        "Pay attention to the syntax, especially indentation.",\n        "Understand the difference between the different data types and operators.",\n        "Practice writing simple programs using control flow statements.",\n        "Know how to define and call functions.",\n        "Be able to read input from the user and display output."\n    ],\n  "example_questions": [\n    "What is the output of the following code?\\n```python\\nx = 5\\ny = 10\\nif x < y:\\n    print(\'x is less than y\')\\nelse:\\n    print(\'x is greater than or equal to y\')\\n```",\n    "Write a Python program that takes two numbers as input and prints their sum.",\n    "Explain the difference between a `for` loop and a `while` loop. Give an example of when you might use each.",\n    "Write a function that takes a string as input and returns the length of the string.",\n    "How do you get input from the user in Python?"\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});

export const generateNotes = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate exam material detail content for each chapter, make sure to includes all topic point in the content, make sure to give content in HTML format (Do not add HTML KL, Head, Body, title tag), The chapters : |  {\n\"chapter_number\": 1,\n\"chapter_title\": \"Advanced Component Patterns\",\n\"chapter_summary\": \"This chapter explores advanced component patterns, focusing on reusability, maintainability, and separation of concerns. It covers techniques like Higher-Order Components (HOCs), Render Props, Compound Components, and custom hooks for abstracting complex logic and creating flexible UI components.\",\n\"topics\": [\n\"Higher-Order Components (HOCs): Understanding the pattern, use cases, and limitations\",\n\"Render Props: Implementing render props for flexible component composition\",\n\"Compound Components: Building components that implicitly share state and behavior\",\n\"Custom Hooks: Extracting and reusing component logic with custom hooks\",\n\"The Provider Pattern with React Context\",\n\"Design patterns for complex UIs: Composite, Strategy, Observer\"\n]\n},\n"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```html\n<h1>Chapter 1: Advanced Component Patterns</h1>\n\n<h2>Chapter Summary</h2>\n<p>This chapter explores advanced component patterns, focusing on reusability, maintainability, and separation of concerns. It covers techniques like Higher-Order Components (HOCs), Render Props, Compound Components, and custom hooks for abstracting complex logic and creating flexible UI components.</p>\n\n<h2>Topics Covered</h2>\n\n<h3>Higher-Order Components (HOCs): Understanding the pattern, use cases, and limitations</h3>\n<ul>\n    <li><strong>Definition:</strong> What is a Higher-Order Component (HOC)? A function that takes a component and returns a new, enhanced component.</li>\n    <li><strong>Purpose:</strong> Abstracting and reusing component logic, code sharing across components, and adding cross-cutting concerns.</li>\n    <li><strong>Use Cases:</strong>\n        <ul>\n            <li>Authentication/Authorization</li>\n            <li>Data fetching and loading state management</li>\n            <li>Logging and performance monitoring</li>\n            <li>Theming and styling</li>\n        </ul>\n    </li>\n    <li><strong>Implementation:</strong>\n        <ul>\n            <li>Creating a basic HOC that adds props to a wrapped component.</li>\n            <li>Passing configuration options to the HOC.</li>\n        </ul>\n    </li>\n    <li><strong>Naming Conventions:</strong> Understanding common naming patterns (e.g., <code>withAuth</code>, <code>connect</code>).</li>\n    <li><strong>Limitations:</strong>\n        <ul>\n            <li>Prop collision issues.</li>\n            <li>Increased component complexity.</li>\n            <li>Potential for name conflicts with wrapped component's props.</li>\n        </ul>\n    </li>\n    <li><strong>Alternatives:</strong> Brief mention of Render Props and Custom Hooks as alternative approaches.</li>\n    <li><strong>Example:</strong> Provide example code of creating a HOC to add a 'loggedIn' prop and demonstrate usage.</li>\n</ul>\n\n<h3>Render Props: Implementing render props for flexible component composition</h3>\n<ul>\n    <li><strong>Definition:</strong> What is a Render Prop? A component prop that is a function, which a component uses to render something.</li>\n    <li><strong>Purpose:</strong> Sharing code between React components using a prop whose value is a function.</li>\n    <li><strong>Use Cases:</strong>\n        <ul>\n            <li>Sharing state and behavior between unrelated components.</li>\n            <li>Creating reusable UI patterns.</li>\n            <li>Conditional rendering based on shared state.</li>\n        </ul>\n    </li>\n    <li><strong>Implementation:</strong>\n        <ul>\n            <li>Creating a component that accepts a function as a prop (typically named <code>render</code> or a specific name related to the component's purpose).</li>\n            <li>Calling the render prop function with the necessary state or data.</li>\n        </ul>\n    </li>\n    <li><strong>Benefits:</strong>\n        <ul>\n            <li>More flexible than HOCs in some cases.</li>\n            <li>Reduces prop collision issues.</li>\n        </ul>\n    </li>\n    <li><strong>Disadvantages:</strong>\n        <ul>\n            <li>Can lead to complex nesting of function calls.</li>\n            <li>Can be less readable than other patterns.</li>\n        </ul>\n    </li>\n    <li><strong>Alternatives:</strong>  Comparison to HOCs and Custom Hooks.</li>\n    <li><strong>Example:</strong> Show a component using render prop to track mouse position and allow parent components to render content based on that position.</li>\n</ul>\n\n<h3>Compound Components: Building components that implicitly share state and behavior</h3>\n<ul>\n    <li><strong>Definition:</strong> What are Compound Components? Components that work together to form a higher-level UI element, implicitly sharing state and logic.</li>\n    <li><strong>Purpose:</strong>  Creating a cohesive and maintainable UI experience where individual components are tightly coupled.</li>\n    <li><strong>Use Cases:</strong>\n        <ul>\n            <li>Tabs</li>\n            <li>Accordions</li>\n            <li>Select/Dropdown menus</li>\n        </ul>\n    </li>\n    <li><strong>Implementation:</strong>\n        <ul>\n            <li>Creating a parent component that manages the shared state.</li>\n            <li>Providing the state and handlers to the child components implicitly (e.g., using React Context).</li>\n            <li>Defining clear relationships and responsibilities for each child component.</li>\n        </ul>\n    </li>\n    <li><strong>Benefits:</strong>\n        <ul>\n            <li>Encapsulation of complex logic.</li>\n            <li>Simplified API for users of the component.</li>\n            <li>Improved code organization and readability.</li>\n        </ul>\n    </li>\n    <li><strong>Disadvantages:</strong>\n        <ul>\n            <li>Tight coupling between components.</li>\n            <li>Less flexibility for customization.</li>\n        </ul>\n    </li>\n    <li><strong>Example:</strong> Code example of building a simple `Tabs` component with `TabList`, `Tab`, and `TabPanels` as child components sharing state to manage active tab.</li>\n</ul>\n\n<h3>Custom Hooks: Extracting and reusing component logic with custom hooks</h3>\n<ul>\n    <li><strong>Definition:</strong> What are Custom Hooks? JavaScript functions that use other React Hooks.</li>\n    <li><strong>Purpose:</strong> Extracting stateful logic and side effects from components, making them reusable across multiple components.</li>\n    <li><strong>Use Cases:</strong>\n        <ul>\n            <li>Form handling</li>\n            <li>Data fetching</li>\n            <li>Managing subscriptions</li>\n            <li>Animation</li>\n        </ul>\n    </li>\n    <li><strong>Implementation:</strong>\n        <ul>\n            <li>Creating a function that starts with <code>use</code> (e.g., <code>useFetchData</code>).</li>\n            <li>Using built-in React Hooks (e.g., <code>useState</code>, <code>useEffect</code>, <code>useContext</code>) within the custom hook.</li>\n            <li>Returning values or functions that the component can use.</li>\n        </ul>\n    </li>\n    <li><strong>Benefits:</strong>\n        <ul>\n            <li>Improved code reusability.</li>\n            <li>Cleaner and more readable components.</li>\n            <li>Easier testing.</li>\n        </ul>\n    </li>\n    <li><strong>Naming Conventions:</strong> Importance of prefixing custom hook names with \"use\".</li>\n    <li><strong>Example:</strong> Show code implementing a custom hook `useCounter` that manages a counter state and provides increment/decrement functions.</li>\n</ul>\n\n<h3>The Provider Pattern with React Context</h3>\n<ul>\n    <li><strong>Definition:</strong> Explanation of the Provider pattern and its role in React Context.</li>\n    <li><strong>Purpose:</strong>  Sharing data across the component tree without explicitly passing props through every level.</li>\n    <li><strong>When to Use:</strong> When multiple components need access to the same data, such as theme settings, user authentication, or language preferences.</li>\n    <li><strong>Implementation:</strong>\n        <ul>\n            <li>Creating a Context using <code>React.createContext()</code>.</li>\n            <li>Using the Context Provider to wrap a section of the component tree.</li>\n            <li>Passing the value to be shared as the <code>value</code> prop of the Provider.</li>\n            <li>Consuming the Context value using <code>useContext()</code> hook in functional components or <code>Context.Consumer</code> in class components.</li>\n        </ul>\n    </li>\n    <li><strong>Benefits:</strong> Avoids \"prop drilling,\" simplifies data management, and improves component reusability.</li>\n    <li><strong>Example:</strong> Provide a simple example of using React Context to share a theme (light/dark) across components.</li>\n</ul>\n\n<h3>Design patterns for complex UIs: Composite, Strategy, Observer</h3>\n<ul>\n    <li><strong>Composite Pattern:</strong>\n        <ul>\n            <li><strong>Definition:</strong> Treats individual objects and compositions of objects uniformly.</li>\n            <li><strong>Use Cases:</strong> Representing hierarchical data structures, such as menus, trees, and organizational charts.</li>\n            <li><strong>Explanation:</strong> How components can be constructed from other components and managed as a single entity.</li>\n        </ul>\n    </li>\n    <li><strong>Strategy Pattern:</strong>\n        <ul>\n            <li><strong>Definition:</strong> Defines a family of algorithms, encapsulates each one, and makes them interchangeable.</li>\n            <li><strong>Use Cases:</strong> Implementing different validation methods, payment gateways, or sorting algorithms.</li>\n            <li><strong>Explanation:</strong> How different behaviors can be selected at runtime, allowing for flexible and configurable components.</li>\n            <li><strong>Implementation Example:</strong> Demonstrate how to use different validation functions depending on user input.</li>\n        </ul>\n    </li>\n     <li><strong>Observer Pattern:</strong>\n        <ul>\n            <li><strong>Definition:</strong> Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</li>\n            <li><strong>Use Cases:</strong>  Implementing event handling, pub/sub systems, and managing subscriptions to data sources.</li>\n            <li><strong>Explanation:</strong> How components can subscribe to changes in data and update their UI accordingly.</li>\n            <li><strong>Implementation Example:</strong> Simple example of a component subscribing to and updating its UI based on data changes from a central store or service.</li>\n        </ul>\n    </li>\n</ul>\n```"},
      ],
    },
  ],
});

// const result = await courseOutline.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
