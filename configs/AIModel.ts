/* eslint-disable @typescript-eslint/no-unused-vars */
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
if (!apiKey) {
  throw new Error("API key is not defined");
}
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const courseOutline = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for python for exam and level of difficulty easy with summary of course. List of chapters along with summary for each chapter, topic list in each chapter, all results in JSON format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "Introduction to Python Programming (Easy Level)",\n  "course_summary": "This course provides a fundamental understanding of Python programming. It covers essential concepts such as variables, data types, control flow, functions, and basic input/output operations. The focus is on building a strong foundation for future Python learning without delving into advanced topics. No prior programming experience is required. You will learn to write simple Python scripts to solve basic problems.",\n  "chapters": [\n    {\n      "chapter_number": 1,\n      "chapter_title": "Introduction to Python",\n      "chapter_summary": "This chapter introduces Python and its features, including why it\'s a popular language for beginners. It covers the basic installation process on different operating systems and introduces a simple Integrated Development Environment (IDE) or text editor for writing and running Python code.",\n      "topics": [\n        "What is Python?",\n        "Why Python is a good language for beginners",\n        "Features of Python",\n        "Installation of Python on Windows, macOS, and Linux",\n        "Setting up a text editor or IDE (e.g., VS Code, Thonny)",\n        "Running your first Python program (Hello, World!)"\n      ]\n    },\n    {\n      "chapter_number": 2,\n      "chapter_title": "Variables, Data Types, and Operators",\n      "chapter_summary": "This chapter covers the basics of storing data using variables. It introduces fundamental data types like integers, floats, strings, and booleans, along with various operators to perform operations on these data types.",\n      "topics": [\n        "Variables: Naming rules and assignment",\n        "Data Types: Integers (int), Floating-point numbers (float), Strings (str), Booleans (bool)",\n        "Type conversion (casting)",\n        "Arithmetic Operators: +, -, *, /, %, **",\n        "Comparison Operators: ==, !=, >, <, >=, <=",\n        "Logical Operators: and, or, not",\n        "Assignment Operators: =, +=, -=, *=, /="\n      ]\n    },\n    {\n      "chapter_number": 3,\n      "chapter_title": "Control Flow: Conditional Statements",\n      "chapter_summary": "This chapter introduces conditional statements (`if`, `elif`, `else`) to control the flow of execution based on certain conditions. It enables programs to make decisions based on input or calculations.",\n      "topics": [\n        "The `if` statement",\n        "The `if-else` statement",\n        "The `if-elif-else` statement",\n        "Nested `if` statements (briefly)",\n        "Using comparison and logical operators in conditional statements",\n        "Truthiness and Falsiness"\n      ]\n    },\n    {\n      "chapter_number": 4,\n      "chapter_title": "Control Flow: Loops",\n      "chapter_summary": "This chapter introduces the concept of loops (`for` and `while`) to repeat blocks of code. You will learn how to iterate over sequences (like strings) and how to repeat actions until a specific condition is met.",\n      "topics": [\n        "The `for` loop: iterating over strings and ranges",\n        "The `while` loop",\n        "The `break` statement",\n        "The `continue` statement",\n        "Nested loops (briefly)",\n        "Using loops with conditional statements"\n      ]\n    },\n    {\n      "chapter_number": 5,\n      "chapter_title": "Functions",\n      "chapter_summary": "This chapter explains how to define and use functions to organize code into reusable blocks. You will learn about function arguments, return values, and the importance of modularity.",\n      "topics": [\n        "Defining a function: `def` keyword",\n        "Calling a function",\n        "Function arguments (parameters): positional and keyword arguments",\n        "Return values: the `return` statement",\n        "Scope of variables (local vs. global)",\n        "Default argument values"\n      ]\n    },\n    {\n      "chapter_number": 6,\n      "chapter_title": "Input and Output",\n      "chapter_summary": "This chapter teaches you how to get input from the user using the `input()` function and how to display output using the `print()` function. You will also learn how to format strings for better readability.",\n      "topics": [\n        "The `print()` function: displaying output",\n        "The `input()` function: getting input from the user",\n        "String formatting: using f-strings and .format() method",\n        "Type conversion: converting strings to numbers (int(), float())",\n        "Basic file I/O (reading from and writing to text files)"\n      ]\n    }\n  ],\n    "exam_tips": [\n        "Pay attention to the syntax, especially indentation.",\n        "Understand the difference between the different data types and operators.",\n        "Practice writing simple programs using control flow statements.",\n        "Know how to define and call functions.",\n        "Be able to read input from the user and display output."\n    ],\n  "example_questions": [\n    "What is the output of the following code?\\n```python\\nx = 5\\ny = 10\\nif x < y:\\n    print(\'x is less than y\')\\nelse:\\n    print(\'x is greater than or equal to y\')\\n```",\n    "Write a Python program that takes two numbers as input and prints their sum.",\n    "Explain the difference between a `for` loop and a `while` loop. Give an example of when you might use each.",\n    "Write a function that takes a string as input and returns the length of the string.",\n    "How do you get input from the user in Python?"\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});

export const generateNotes = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate detailed study material content for each chapter in HTML format, following a consistent structure: use <h1> with an emoji for the chapter title, provide an introduction with <p>, list key topics with <h2> and <ul> using emojis, include detailed explanations with <p> and <strong>, add examples with <pre> or <code>, highlight important notes with <strong> or <em>, and summarize exam focus areas with <h2> and <ul>; ensure the content is well-organized, visually appealing, and exam-focused, avoiding <html>, <head>, <body>, or <title> tags, for the chapters: React JS."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```html\n<h1> ‚öõÔ∏è Chapter 1: Introduction to React JS</h1>\n\n<p>Welcome to the world of React JS! This chapter provides a foundational understanding of React, its benefits, and how it revolutionized front-end development. We'll cover the core concepts and lay the groundwork for more advanced topics in the following chapters.</p>\n\n<h2> üöÄ Key Topics</h2>\n<ul>\n  <li>‚ú® What is React?</li>\n  <li>üèÜ Benefits of Using React</li>\n  <li>üõ†Ô∏è React's Core Principles: Components, JSX, Virtual DOM</li>\n  <li>‚öôÔ∏è Setting up a React Development Environment</li>\n</ul>\n\n<p><strong>What is React?</strong> React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It allows you to break down complex UIs into smaller, reusable components. Developed and maintained by Facebook, React has become one of the most popular front-end libraries due to its ease of use and powerful features.</p>\n\n<p><strong>Benefits of Using React:</strong></p>\n<ul>\n  <li><strong>Component-Based:</strong>  Enables code reusability and makes applications easier to maintain.</li>\n  <li><strong>Declarative:</strong>  Makes code more predictable and easier to debug.</li>\n  <li><strong>Efficient:</strong>  Uses a Virtual DOM to optimize updates and improve performance.</li>\n  <li><strong>Learn Once, Write Anywhere:</strong> Can be used to develop web, mobile (React Native), and even desktop applications.</li>\n  <li><strong>Large Community:</strong> Extensive documentation, libraries, and support are readily available.</li>\n</ul>\n\n<p><strong>React's Core Principles:</strong></p>\n<ul>\n  <li><strong>Components:</strong> The building blocks of React applications. They are independent, reusable pieces of code that render HTML.</li>\n  <li><strong>JSX:</strong> A syntax extension to JavaScript that allows you to write HTML-like structures within JavaScript code.  It makes React components more readable and maintainable.</li>\n  <li><strong>Virtual DOM:</strong> An in-memory representation of the actual DOM. React uses it to efficiently update the actual DOM, minimizing performance overhead.</li>\n</ul>\n\n<pre>\n  <code>\n    // Example of a simple React component using JSX\n    function Welcome(props) {\n      return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n    }\n  </code>\n</pre>\n\n<p><strong>Setting up a React Development Environment:</strong> You'll need Node.js and npm (or yarn) installed.  Then, you can use Create React App, a tool that simplifies the process of setting up a new React project.</p>\n\n<pre>\n  <code>\n    // Creating a new React app using Create React App\n    npx create-react-app my-app\n    cd my-app\n    npm start\n  </code>\n</pre>\n\n<p><em>Important Note:</em> Ensure you have the latest versions of Node.js and npm for optimal performance and compatibility.</p>\n\n<h2> üéØ Exam Focus Areas</h2>\n<ul>\n  <li>Understanding the core concepts of React (Components, JSX, Virtual DOM).</li>\n  <li>Knowing the benefits of using React for building user interfaces.</li>\n  <li>Being familiar with setting up a basic React development environment.</li>\n</ul>\n\n<h1> ‚öõÔ∏è Chapter 2: Components and JSX</h1>\n\n<p>This chapter dives deep into React components and JSX, the fundamental building blocks of React applications. You'll learn how to create, compose, and render components, and understand the power and flexibility of JSX.</p>\n\n<h2> üöÄ Key Topics</h2>\n<ul>\n  <li>üß± Functional Components</li>\n  <li>üèóÔ∏è Class Components (with lifecycle methods)</li>\n  <li>‚úçÔ∏è Understanding JSX Syntax</li>\n  <li>üîë Passing Data with Props</li>\n  <li>üë∂ Component Composition</li>\n</ul>\n\n<p><strong>Functional Components:</strong>  These are the simplest type of React components.  They are essentially JavaScript functions that return JSX. Use them for displaying data and UI elements without managing state or using lifecycle methods.</p>\n\n<pre>\n  <code>\n    // Functional component example\n    function Greeting(props) {\n      return &lt;h1&gt;Hello, {props.name}!&lt;/h1&gt;;\n    }\n  </code>\n</pre>\n\n<p><strong>Class Components:</strong> More complex components that can manage state, handle events, and use lifecycle methods.  They are defined as ES6 classes that extend the `React.Component` class.</p>\n\n<pre>\n  <code>\n    // Class component example\n    class Welcome extends React.Component {\n      render() {\n        return &lt;h1&gt;Hello, {this.props.name}!&lt;/h1&gt;;\n      }\n    }\n  </code>\n</pre>\n\n<p><strong>Understanding JSX Syntax:</strong> JSX is a syntax extension that allows you to write HTML-like code within JavaScript.  Key things to remember:</p>\n<ul>\n  <li>JSX expressions must have one root element.</li>\n  <li>JavaScript expressions can be embedded using curly braces `{}`.</li>\n  <li>HTML attributes are generally camelCased (e.g., `className` instead of `class`).</li>\n</ul>\n\n<pre>\n  <code>\n    // Example of JSX with embedded JavaScript expressions\n    const name = \"Alice\";\n    const element = &lt;h1 className=\"greeting\"&gt;Hello, {name}!&lt;/h1&gt;;\n  </code>\n</pre>\n\n<p><strong>Passing Data with Props:</strong> Props (properties) are how you pass data from a parent component to a child component.  They are read-only from the child component's perspective.</p>\n\n<pre>\n  <code>\n    // Parent component\n    function App() {\n      return &lt;Welcome name=\"Bob\" /&gt;;\n    }\n\n    // Child component (functional)\n    function Welcome(props) {\n      return &lt;h1&gt;Hello, {props.name}!&lt;/h1&gt;;\n    }\n  </code>\n</pre>\n\n<p><strong>Component Composition:</strong> The practice of combining multiple components to create more complex UIs. This promotes reusability and modularity.</p>\n\n<pre>\n  <code>\n    // Composing components\n    function App() {\n      return (\n        &lt;div&gt;\n          &lt;Header /&gt;\n          &lt;MainContent /&gt;\n          &lt;Footer /&gt;\n        &lt;/div&gt;\n      );\n    }\n  </code>\n</pre>\n\n<p><strong><em>Important Note:</em></strong>  Prioritize functional components with Hooks for new projects where possible. They are generally easier to read and test.</p>\n\n<h2> üéØ Exam Focus Areas</h2>\n<ul>\n  <li>Differentiating between functional and class components.</li>\n  <li>Understanding JSX syntax and how to use expressions.</li>\n  <li>Passing data using props and understanding their immutability.</li>\n  <li>Composing components to create complex user interfaces.</li>\n</ul>\n\n<h1> ‚öõÔ∏è Chapter 3: State and Lifecycle</h1>\n\n<p>This chapter explores state management and component lifecycle methods, enabling you to build dynamic and interactive React applications. You'll learn how components can manage their internal data and respond to changes over time.</p>\n\n<h2> üöÄ Key Topics</h2>\n<ul>\n  <li>üì¶ Understanding State</li>\n  <li>üîÑ Using `useState` Hook (Functional Components)</li>\n  <li>üå± Managing State in Class Components (`this.state`, `this.setState`)</li>\n  <li>‚è∞ Lifecycle Methods (Class Components): `componentDidMount`, `componentDidUpdate`, `componentWillUnmount`</li>\n  <li>üé£ Effect Hook: `useEffect` (Functional Components)</li>\n</ul>\n\n<p><strong>Understanding State:</strong>  State represents the data that a component manages internally. When the state of a component changes, React re-renders the component to reflect the updated data.</p>\n\n<p><strong>Using `useState` Hook (Functional Components):</strong> The `useState` hook allows you to add state to functional components. It returns a state variable and a function to update that variable.</p>\n\n<pre>\n  <code>\n    // Using useState hook\n    import React, { useState } from 'react';\n\n    function Counter() {\n      const [count, setCount] = useState(0);\n\n      return (\n        &lt;div&gt;\n          &lt;p&gt;You clicked {count} times&lt;/p&gt;\n          &lt;button onClick={() => setCount(count + 1)}&gt;\n            Click me\n          &lt;/button&gt;\n        &lt;/div&gt;\n      );\n    }\n  </code>\n</pre>\n\n<p><strong>Managing State in Class Components:</strong> Class components manage state using `this.state` to initialize the state and `this.setState` to update it. `setState` triggers a re-render of the component.</p>\n\n<pre>\n  <code>\n    // Managing state in a class component\n    class Counter extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = { count: 0 };\n      }\n\n      handleClick() {\n        this.setState({ count: this.state.count + 1 });\n      }\n\n      render() {\n        return (\n          &lt;div&gt;\n            &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\n            &lt;button onClick={() => this.handleClick()}&gt;\n              Click me\n            &lt;/button&gt;\n          &lt;/div&gt;\n        );\n      }\n    }\n  </code>\n</pre>\n\n<p><strong>Lifecycle Methods (Class Components):</strong> These methods allow you to perform actions at specific points in a component's lifecycle. Common lifecycle methods include:</p>\n<ul>\n  <li><strong>`componentDidMount()`:</strong> Called immediately after a component is mounted (inserted into the DOM).  Ideal for fetching data.</li>\n  <li><strong>`componentDidUpdate(prevProps, prevState)`:</strong> Called immediately after an update occurs.  Use this to perform side effects based on prop or state changes.</li>\n  <li><strong>`componentWillUnmount()`:</strong> Called immediately before a component is unmounted and destroyed.  Use this to clean up resources (e.g., timers, event listeners).</li>\n</ul>\n\n<pre>\n  <code>\n    // Example of componentDidMount and componentWillUnmount\n    class MyComponent extends React.Component {\n      componentDidMount() {\n        console.log(\"Component mounted!\");\n        this.intervalId = setInterval(() => console.log(\"Tick\"), 1000);\n      }\n\n      componentWillUnmount() {\n        console.log(\"Component unmounted!\");\n        clearInterval(this.intervalId);\n      }\n\n      render() {\n        return &lt;div&gt;Hello!&lt;/div&gt;;\n      }\n    }\n  </code>\n</pre>\n\n<p><strong>Effect Hook: `useEffect` (Functional Components):</strong>  This hook allows you to perform side effects in functional components, similar to lifecycle methods in class components.  It can be used for data fetching, subscriptions, and manually changing the DOM.</p>\n\n<pre>\n  <code>\n    // Using useEffect hook\n    import React, { useState, useEffect } from 'react';\n\n    function MyComponent() {\n      const [count, setCount] = useState(0);\n\n      useEffect(() => {\n        console.log(\"Component mounted or updated!\");\n        document.title = `You clicked ${count} times`;\n\n        return () => {\n          console.log(\"Component unmounted or dependencies changed!\");\n        };\n      }, [count]); // Only re-run the effect if count changes\n\n      return (\n        &lt;div&gt;\n          &lt;p&gt;You clicked {count} times&lt;/p&gt;\n          &lt;button onClick={() => setCount(count + 1)}&gt;\n            Click me\n          &lt;/button&gt;\n        &lt;/div&gt;\n      );\n    }\n  </code>\n</pre>\n\n<p><strong><em>Important Note:</em></strong> Always clean up side effects in `useEffect` to prevent memory leaks, especially when working with subscriptions or timers.</p>\n\n<h2> üéØ Exam Focus Areas</h2>\n<ul>\n  <li>Understanding the concept of state and its importance in React.</li>\n  <li>Using the `useState` hook effectively to manage state in functional components.</li>\n  <li>Managing state in class components using `this.state` and `this.setState`.</li>\n  <li>Knowing the purpose and usage of common lifecycle methods (`componentDidMount`, `componentDidUpdate`, `componentWillUnmount`).</li>\n  <li>Using the `useEffect` hook for side effects and understanding dependency arrays.</li>\n</ul>\n```"},
      ],
    },
  ],
});

export const GenerateStudyTypeContent = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate the flashcard on topic : TailwindCSS, UserInterface (UI) Development.Basic classes in JSON format with only\nfront  and  back content, Maximum 15"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"front\": \"What Tailwind class controls text color?\",\n    \"back\": \"text-{color}-{brightness (optional)}\"\n  },\n  {\n    \"front\": \"How do you apply a background color using Tailwind?\",\n    \"back\": \"bg-{color}-{brightness (optional)}\"\n  },\n  {\n    \"front\": \"What Tailwind classes set padding?\",\n    \"back\": \"p-{size}, px-{size}, py-{size}, pt-{size}, pb-{size}, pl-{size}, pr-{size}\"\n  },\n  {\n    \"front\": \"How do you add margins with Tailwind?\",\n    \"back\": \"m-{size}, mx-{size}, my-{size}, mt-{size}, mb-{size}, ml-{size}, mr-{size}\"\n  },\n  {\n    \"front\": \"What Tailwind class is used for setting font weight?\",\n    \"back\": \"font-{weight}\"\n  },\n  {\n    \"front\": \"How do you change the font size in Tailwind?\",\n    \"back\": \"text-{size}\"\n  },\n  {\n    \"front\": \"Which Tailwind class makes an element a flex container?\",\n    \"back\": \"flex\"\n  },\n  {\n    \"front\": \"How to center items vertically in a flex container using Tailwind?\",\n    \"back\": \"items-center\"\n  },\n  {\n    \"front\": \"How to center items horizontally in a flex container using Tailwind?\",\n    \"back\": \"justify-center\"\n  },\n  {\n    \"front\": \"What Tailwind class is used to create rounded corners?\",\n    \"back\": \"rounded-{size}\"\n  },\n  {\n    \"front\": \"How do you add a border with Tailwind?\",\n    \"back\": \"border-{width (optional)} border-{color (optional)}\"\n  },\n  {\n    \"front\": \"What Tailwind class hides an element?\",\n    \"back\": \"hidden\"\n  },\n  {\n    \"front\": \"How do you make an element visible using Tailwind?\",\n    \"back\": \"visible\"\n  },\n  {\n    \"front\": \"What Tailwind class makes an element `inline-block`?\",\n    \"back\": \"inline-block\"\n  },\n  {\n    \"front\": \"How do you set the display property to `block` with Tailwind?\",\n    \"back\": \"block\"\n  }\n]\n```"},
      ],
    },
  ],
});

export const GenerateQuiz = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate Quiz on topic: NextJS app router's file based routing with questions and options along with correct answer in JSON format (Max: 10)"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"quizTitle\": \"Next.js App Router: File-Based Routing\",\n  \"questions\": [\n    {\n      \"questionText\": \"In the Next.js App Router, how is a route segment defined in the `app` directory?\",\n      \"options\": [\n        \"By creating a file named `route.js` or `route.ts`\",\n        \"By creating a directory with the desired route segment name\",\n        \"By defining a route in `next.config.js`\",\n        \"By using the `next/router` module\"\n      ],\n      \"correctAnswer\": \"By creating a directory with the desired route segment name\"\n    },\n    {\n      \"questionText\": \"Which file is conventionally used to define the UI for a route segment in the App Router?\",\n      \"options\": [\n        \"index.js\",\n        \"page.js\",\n        \"layout.js\",\n        \"component.js\"\n      ],\n      \"correctAnswer\": \"page.js\"\n    },\n    {\n      \"questionText\": \"How do you create a dynamic route segment (e.g., `/blog/[slug]`) in the App Router?\",\n      \"options\": [\n        \"Use curly braces: `/blog/{slug}`\",\n        \"Use square brackets: `/blog/[slug]`\",\n        \"Use angle brackets: `/blog/<slug>`\",\n        \"Use parentheses: `/blog/(slug)`\"\n      ],\n      \"correctAnswer\": \"Use square brackets: `/blog/[slug]`\"\n    },\n    {\n      \"questionText\": \"What file is responsible for defining UI that is shared across all routes within a directory and its subdirectories in the App Router?\",\n      \"options\": [\n        \"template.js\",\n        \"page.js\",\n        \"layout.js\",\n        \"global.js\"\n      ],\n      \"correctAnswer\": \"layout.js\"\n    },\n    {\n      \"questionText\": \"Which of the following is NOT a special file in the App Router for defining routing or UI?\",\n      \"options\": [\n        \"page.js\",\n        \"layout.js\",\n        \"template.js\",\n        \"data.js\"\n      ],\n      \"correctAnswer\": \"data.js\"\n    },\n    {\n      \"questionText\": \"How do you access the parameters from a dynamic route segment (e.g., `[slug]`) within a `page.js` file?\",\n      \"options\": [\n        \"Using `useParams` hook from `next/navigation`\",\n        \"Using `context.params` in `getStaticProps`\",\n        \"Using `router.query` from `next/router`\",\n        \"Using `props.params` passed to the component\"\n      ],\n      \"correctAnswer\": \"Using `useParams` hook from `next/navigation`\"\n    },\n    {\n      \"questionText\": \"What is the main difference between `layout.js` and `template.js` in the App Router?\",\n      \"options\": [\n        \"`layout.js` persists state on navigation, `template.js` creates a new component instance on navigation.\",\n        \"`layout.js` is for client components, `template.js` is for server components.\",\n        \"`layout.js` is required in every directory, `template.js` is optional.\",\n        \"`layout.js` defines the structure, `template.js` defines the styling.\"\n      ],\n      \"correctAnswer\": \"`layout.js` persists state on navigation, `template.js` creates a new component instance on navigation.\"\n    },\n    {\n      \"questionText\": \"How do you create a route group in the App Router, allowing you to organize files without affecting the URL structure?\",\n      \"options\": [\n        \"Using double quotes: `\\\"(group)\\\"`\",\n        \"Using angle brackets: `<(group)>`\",\n        \"Using parentheses: `(group)`\",\n        \"Using square brackets: `[(group)]`\"\n      ],\n      \"correctAnswer\": \"Using parentheses: `(group)`\"\n    },\n    {\n      \"questionText\": \"Which file is used to fetch and pre-render content on the server in Next.js App Router (alternative to getStaticProps and getServerSideProps)?\",\n      \"options\": [\n        \"There is no direct equivalent.\",\n        \"server.js\",\n        \"It's done directly within the Server Component using `async` functions and `fetch`\",\n        \"render.js\"\n      ],\n      \"correctAnswer\": \"It's done directly within the Server Component using `async` functions and `fetch`\"\n    },\n    {\n      \"questionText\": \"How do you create a parallel route in Next.js App Router?\",\n      \"options\": [\n        \"By creating folders prefixed with an underscore.\",\n        \"By creating folders named with double underscores.\",\n        \"Parallel routes are not supported in the App Router.\",\n        \"By using named slots with the `@` symbol (e.g., `@modal`) in the directory name.\"\n      ],\n      \"correctAnswer\": \"By using named slots with the `@` symbol (e.g., `@modal`) in the directory name.\"\n    }\n  ]\n}\n```"},
      ],
    },
  ],
});

// const result = await courseOutline.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
